{"version":3,"file":"component.js","sources":["../src/mustache.js","../../../../node_modules/mustache/mustache.js","../src/base.js","../src/component.js"],"sourcesContent":["/*!\r\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\r\n * http://github.com/janl/mustache.js\r\n */\r\n\r\nvar objectToString = Object.prototype.toString;\r\nvar isArray = Array.isArray || function isArrayPolyfill(object) {\r\n    return objectToString.call(object) === '[object Array]';\r\n};\r\n\r\nfunction isFunction(object) {\r\n    return typeof object === 'function';\r\n}\r\n\r\n/**\r\n * More correct typeof string handling array\r\n * which normally returns typeof 'object'\r\n */\r\nfunction typeStr(obj) {\r\n    return isArray(obj) ? 'array' : typeof obj;\r\n}\r\n\r\nfunction escapeRegExp(string) {\r\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\r\n}\r\n\r\n/**\r\n * Null safe way of checking whether or not an object,\r\n * including its prototype, has a given property\r\n */\r\nfunction hasProperty(obj, propName) {\r\n    return obj != null && typeof obj === 'object' && (propName in obj);\r\n}\r\n\r\n/**\r\n * Safe way of detecting whether or not the given thing is a primitive and\r\n * whether it has the given property\r\n */\r\nfunction primitiveHasOwnProperty(primitive, propName) {\r\n    return (\r\n        primitive != null\r\n        && typeof primitive !== 'object'\r\n        && primitive.hasOwnProperty\r\n        && primitive.hasOwnProperty(propName)\r\n    );\r\n}\r\n\r\n// Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\r\n// See https://github.com/janl/mustache.js/issues/189\r\nvar regExpTest = RegExp.prototype.test;\r\n\r\nfunction testRegExp(re, string) {\r\n    return regExpTest.call(re, string);\r\n}\r\n\r\nvar nonSpaceRe = /\\S/;\r\n\r\nfunction isWhitespace(string) {\r\n    return !testRegExp(nonSpaceRe, string);\r\n}\r\n\r\nvar entityMap = {\r\n    '&': '&amp;',\r\n    '<': '&lt;',\r\n    '>': '&gt;',\r\n    '\"': '&quot;',\r\n    \"'\": '&#39;',\r\n    '/': '&#x2F;',\r\n    '`': '&#x60;',\r\n    '=': '&#x3D;'\r\n};\r\n\r\nfunction escapeHtml(string) {\r\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap(s) {\r\n        return entityMap[s];\r\n    });\r\n}\r\n\r\nvar whiteRe = /\\s*/;\r\nvar spaceRe = /\\s+/;\r\nvar equalsRe = /\\s*=/;\r\nvar curlyRe = /\\s*\\}/;\r\nvar tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\r\n\r\n/**\r\n * Breaks up the given `template` string into a tree of tokens. If the `tags`\r\n * argument is given here it must be an array with two string values: the\r\n * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\r\n * course, the default is to use mustaches (i.e. mustache.tags).\r\n *\r\n * A token is an array with at least 4 elements. The first element is the\r\n * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\r\n * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\r\n * all text that appears outside a symbol this element is \"text\".\r\n *\r\n * The second element of a token is its \"value\". For mustache tags this is\r\n * whatever else was inside the tag besides the opening symbol. For text tokens\r\n * this is the text itself.\r\n *\r\n * The third and fourth elements of the token are the start and end indices,\r\n * respectively, of the token in the original template.\r\n *\r\n * Tokens that are the root node of a subtree contain two more elements: 1) an\r\n * array of tokens in the subtree and 2) the index in the original template at\r\n * which the closing tag for that section begins.\r\n *\r\n * Tokens for partials also contain two more elements: 1) a string value of\r\n * indendation prior to that tag and 2) the index of that tag on that line -\r\n * eg a value of 2 indicates the partial is the third tag on this line.\r\n */\r\nfunction parseTemplate(template, tags) {\r\n    if (!template)\r\n        return [];\r\n    var lineHasNonSpace = false;\r\n    var sections = [];     // Stack to hold section tokens\r\n    var tokens = [];       // Buffer to hold the tokens\r\n    var spaces = [];       // Indices of whitespace tokens on the current line\r\n    var hasTag = false;    // Is there a {{tag}} on the current line?\r\n    var nonSpace = false;  // Is there a non-space char on the current line?\r\n    var indentation = '';  // Tracks indentation for tags that use it\r\n    var tagIndex = 0;      // Stores a count of number of tags encountered on a line\r\n\r\n    // Strips all whitespace tokens array for the current line\r\n    // if there was a {{#tag}} on it and otherwise only space.\r\n    function stripSpace() {\r\n        if (hasTag && !nonSpace) {\r\n            while (spaces.length)\r\n                delete tokens[spaces.pop()];\r\n        } else {\r\n            spaces = [];\r\n        }\r\n\r\n        hasTag = false;\r\n        nonSpace = false;\r\n    }\r\n\r\n    var openingTagRe, closingTagRe, closingCurlyRe;\r\n\r\n    function compileTags(tagsToCompile) {\r\n        if (typeof tagsToCompile === 'string')\r\n            tagsToCompile = tagsToCompile.split(spaceRe, 2);\r\n\r\n        if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\r\n            throw new Error('Invalid tags: ' + tagsToCompile);\r\n\r\n        openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\r\n        closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\r\n        closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\r\n    }\r\n\r\n    compileTags(tags || mustache.tags);\r\n\r\n    var scanner = new Scanner(template);\r\n\r\n    var start, type, value, chr, token, openSection;\r\n    while (!scanner.eos()) {\r\n        start = scanner.pos;\r\n\r\n        // Match any text between tags.\r\n        value = scanner.scanUntil(openingTagRe);\r\n\r\n        if (value) {\r\n            for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\r\n                chr = value.charAt(i);\r\n\r\n                if (isWhitespace(chr)) {\r\n                    spaces.push(tokens.length);\r\n                    indentation += chr;\r\n                } else {\r\n                    nonSpace = true;\r\n                    lineHasNonSpace = true;\r\n                    indentation += ' ';\r\n                }\r\n\r\n                tokens.push(['text', chr, start, start + 1]);\r\n                start += 1;\r\n\r\n                // Check for whitespace on the current line.\r\n                if (chr === '\\n') {\r\n                    stripSpace();\r\n                    indentation = '';\r\n                    tagIndex = 0;\r\n                    lineHasNonSpace = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Match the opening tag.\r\n        if (!scanner.scan(openingTagRe))\r\n            break;\r\n\r\n        hasTag = true;\r\n\r\n        // Get the tag type.\r\n        type = scanner.scan(tagRe) || 'name';\r\n        scanner.scan(whiteRe);\r\n\r\n        // Get the tag value.\r\n        if (type === '=') {\r\n            value = scanner.scanUntil(equalsRe);\r\n            scanner.scan(equalsRe);\r\n            scanner.scanUntil(closingTagRe);\r\n        } else if (type === '{') {\r\n            value = scanner.scanUntil(closingCurlyRe);\r\n            scanner.scan(curlyRe);\r\n            scanner.scanUntil(closingTagRe);\r\n            type = '&';\r\n        } else {\r\n            value = scanner.scanUntil(closingTagRe);\r\n        }\r\n\r\n        // Match the closing tag.\r\n        if (!scanner.scan(closingTagRe))\r\n            throw new Error('Unclosed tag at ' + scanner.pos);\r\n\r\n        if (type == '>') {\r\n            token = [type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace];\r\n        } else {\r\n            token = [type, value, start, scanner.pos];\r\n        }\r\n        tagIndex++;\r\n        tokens.push(token);\r\n\r\n        if (type === '#' || type === '^') {\r\n            sections.push(token);\r\n        } else if (type === '/') {\r\n            // Check section nesting.\r\n            openSection = sections.pop();\r\n\r\n            if (!openSection)\r\n                throw new Error('Unopened section \"' + value + '\" at ' + start);\r\n\r\n            if (openSection[1] !== value)\r\n                throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\r\n        } else if (type === 'name' || type === '{' || type === '&') {\r\n            nonSpace = true;\r\n        } else if (type === '=') {\r\n            // Set the tags for the next time around.\r\n            compileTags(value);\r\n        }\r\n    }\r\n\r\n    stripSpace();\r\n\r\n    // Make sure there are no open sections when we're done.\r\n    openSection = sections.pop();\r\n\r\n    if (openSection)\r\n        throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\r\n\r\n    return nestTokens(squashTokens(tokens));\r\n}\r\n\r\n/**\r\n * Combines the values of consecutive text tokens in the given `tokens` array\r\n * to a single token.\r\n */\r\nfunction squashTokens(tokens) {\r\n    var squashedTokens = [];\r\n\r\n    var token, lastToken;\r\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\r\n        token = tokens[i];\r\n\r\n        if (token) {\r\n            if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\r\n                lastToken[1] += token[1];\r\n                lastToken[3] = token[3];\r\n            } else {\r\n                squashedTokens.push(token);\r\n                lastToken = token;\r\n            }\r\n        }\r\n    }\r\n\r\n    return squashedTokens;\r\n}\r\n\r\n/**\r\n * Forms the given array of `tokens` into a nested tree structure where\r\n * tokens that represent a section have two additional items: 1) an array of\r\n * all tokens that appear in that section and 2) the index in the original\r\n * template that represents the end of that section.\r\n */\r\nfunction nestTokens(tokens) {\r\n    var nestedTokens = [];\r\n    var collector = nestedTokens;\r\n    var sections = [];\r\n\r\n    var token, section;\r\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\r\n        token = tokens[i];\r\n\r\n        switch (token[0]) {\r\n            case '#':\r\n            case '^':\r\n                collector.push(token);\r\n                sections.push(token);\r\n                collector = token[4] = [];\r\n                break;\r\n            case '/':\r\n                section = sections.pop();\r\n                section[5] = token[2];\r\n                collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\r\n                break;\r\n            default:\r\n                collector.push(token);\r\n        }\r\n    }\r\n\r\n    return nestedTokens;\r\n}\r\n\r\n/**\r\n * A simple string scanner that is used by the template parser to find\r\n * tokens in template strings.\r\n */\r\nfunction Scanner(string) {\r\n    this.string = string;\r\n    this.tail = string;\r\n    this.pos = 0;\r\n}\r\n\r\n/**\r\n * Returns `true` if the tail is empty (end of string).\r\n */\r\nScanner.prototype.eos = function eos() {\r\n    return this.tail === '';\r\n};\r\n\r\n/**\r\n * Tries to match the given regular expression at the current position.\r\n * Returns the matched text if it can match, the empty string otherwise.\r\n */\r\nScanner.prototype.scan = function scan(re) {\r\n    var match = this.tail.match(re);\r\n\r\n    if (!match || match.index !== 0)\r\n        return '';\r\n\r\n    var string = match[0];\r\n\r\n    this.tail = this.tail.substring(string.length);\r\n    this.pos += string.length;\r\n\r\n    return string;\r\n};\r\n\r\n/**\r\n * Skips all text until the given regular expression can be matched. Returns\r\n * the skipped string, which is the entire tail if no match can be made.\r\n */\r\nScanner.prototype.scanUntil = function scanUntil(re) {\r\n    var index = this.tail.search(re), match;\r\n\r\n    switch (index) {\r\n        case -1:\r\n            match = this.tail;\r\n            this.tail = '';\r\n            break;\r\n        case 0:\r\n            match = '';\r\n            break;\r\n        default:\r\n            match = this.tail.substring(0, index);\r\n            this.tail = this.tail.substring(index);\r\n    }\r\n\r\n    this.pos += match.length;\r\n\r\n    return match;\r\n};\r\n\r\n/**\r\n * Represents a rendering context by wrapping a view object and\r\n * maintaining a reference to the parent context.\r\n */\r\nfunction Context(view, parentContext) {\r\n    this.view = view;\r\n    this.cache = {'.': this.view};\r\n    this.parent = parentContext;\r\n}\r\n\r\n/**\r\n * Creates a new context using the given view with this context\r\n * as the parent.\r\n */\r\nContext.prototype.push = function push(view) {\r\n    return new Context(view, this);\r\n};\r\n\r\n/**\r\n * Returns the value of the given name in this context, traversing\r\n * up the context hierarchy if the value is absent in this context's view.\r\n */\r\nContext.prototype.lookup = function lookup(name) {\r\n    var cache = this.cache;\r\n\r\n    var value;\r\n    if (cache.hasOwnProperty(name)) {\r\n        value = cache[name];\r\n    } else {\r\n        var context = this, intermediateValue, names, index, lookupHit = false;\r\n\r\n        while (context) {\r\n            if (name.indexOf('.') > 0) {\r\n                intermediateValue = context.view;\r\n                names = name.split('.');\r\n                index = 0;\r\n\r\n                /**\r\n                 * Using the dot notion path in `name`, we descend through the\r\n                 * nested objects.\r\n                 *\r\n                 * To be certain that the lookup has been successful, we have to\r\n                 * check if the last object in the path actually has the property\r\n                 * we are looking for. We store the result in `lookupHit`.\r\n                 *\r\n                 * This is specially necessary for when the value has been set to\r\n                 * `undefined` and we want to avoid looking up parent contexts.\r\n                 *\r\n                 * In the case where dot notation is used, we consider the lookup\r\n                 * to be successful even if the last \"object\" in the path is\r\n                 * not actually an object but a primitive (e.g., a string, or an\r\n                 * integer), because it is sometimes useful to access a property\r\n                 * of an autoboxed primitive, such as the length of a string.\r\n                 **/\r\n                while (intermediateValue != null && index < names.length) {\r\n                    if (index === names.length - 1)\r\n                        lookupHit = (\r\n                            hasProperty(intermediateValue, names[index])\r\n                            || primitiveHasOwnProperty(intermediateValue, names[index])\r\n                        );\r\n\r\n                    intermediateValue = intermediateValue[names[index++]];\r\n                }\r\n            } else {\r\n                intermediateValue = context.view[name];\r\n\r\n                /**\r\n                 * Only checking against `hasProperty`, which always returns `false` if\r\n                 * `context.view` is not an object. Deliberately omitting the check\r\n                 * against `primitiveHasOwnProperty` if dot notation is not used.\r\n                 *\r\n                 * Consider this example:\r\n                 * ```\r\n                 * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\r\n                 * ```\r\n                 *\r\n                 * If we were to check also against `primitiveHasOwnProperty`, as we do\r\n                 * in the dot notation case, then render call would return:\r\n                 *\r\n                 * \"The length of a football field is 9.\"\r\n                 *\r\n                 * rather than the expected:\r\n                 *\r\n                 * \"The length of a football field is 100 yards.\"\r\n                 **/\r\n                lookupHit = hasProperty(context.view, name);\r\n            }\r\n\r\n            if (lookupHit) {\r\n                value = intermediateValue;\r\n                break;\r\n            }\r\n\r\n            context = context.parent;\r\n        }\r\n\r\n        cache[name] = value;\r\n    }\r\n\r\n    if (isFunction(value))\r\n        value = value.call(this.view);\r\n\r\n    return value;\r\n};\r\n\r\n/**\r\n * A Writer knows how to take a stream of tokens and render them to a\r\n * string, given a context. It also maintains a cache of templates to\r\n * avoid the need to parse the same template twice.\r\n */\r\nfunction Writer() {\r\n    this.templateCache = {\r\n        _cache: {},\r\n        set: function set(key, value) {\r\n            this._cache[key] = value;\r\n        },\r\n        get: function get(key) {\r\n            return this._cache[key];\r\n        },\r\n        clear: function clear() {\r\n            this._cache = {};\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Clears all cached templates in this writer.\r\n */\r\nWriter.prototype.clearCache = function clearCache() {\r\n    if (typeof this.templateCache !== 'undefined') {\r\n        this.templateCache.clear();\r\n    }\r\n};\r\n\r\n/**\r\n * Parses and caches the given `template` according to the given `tags` or\r\n * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\r\n * that is generated from the parse.\r\n */\r\nWriter.prototype.parse = function parse(template, tags) {\r\n    var cache = this.templateCache;\r\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\r\n    var isCacheEnabled = typeof cache !== 'undefined';\r\n    var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\r\n\r\n    if (tokens == undefined) {\r\n        tokens = parseTemplate(template, tags);\r\n        isCacheEnabled && cache.set(cacheKey, tokens);\r\n    }\r\n    return tokens;\r\n};\r\n\r\n/**\r\n * High-level method that is used to render the given `template` with\r\n * the given `view`.\r\n *\r\n * The optional `partials` argument may be an object that contains the\r\n * names and templates of partials that are used in the template. It may\r\n * also be a function that is used to load partial templates on the fly\r\n * that takes a single argument: the name of the partial.\r\n *\r\n * If the optional `config` argument is given here, then it should be an\r\n * object with a `tags` attribute or an `escape` attribute or both.\r\n * If an array is passed, then it will be interpreted the same way as\r\n * a `tags` attribute on a `config` object.\r\n *\r\n * The `tags` attribute of a `config` object must be an array with two\r\n * string values: the opening and closing tags used in the template (e.g.\r\n * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\r\n *\r\n * The `escape` attribute of a `config` object must be a function which\r\n * accepts a string as input and outputs a safely escaped string.\r\n * If an `escape` function is not provided, then an HTML-safe string\r\n * escaping function is used as the default.\r\n */\r\nWriter.prototype.render = function render(template, view, partials, config) {\r\n    var tags = this.getConfigTags(config);\r\n    var tokens = this.parse(template, tags);\r\n    var context = (view instanceof Context) ? view : new Context(view, undefined);\r\n    return this.renderTokens(tokens, context, partials, template, config);\r\n};\r\n\r\n/**\r\n * Low-level method that renders the given array of `tokens` using\r\n * the given `context` and `partials`.\r\n *\r\n * Note: The `originalTemplate` is only ever used to extract the portion\r\n * of the original template that was contained in a higher-order section.\r\n * If the template doesn't use higher-order sections, this argument may\r\n * be omitted.\r\n */\r\nWriter.prototype.renderTokens = function renderTokens(tokens, context, partials, originalTemplate, config) {\r\n    var buffer = '';\r\n\r\n    var token, symbol, value;\r\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\r\n        value = undefined;\r\n        token = tokens[i];\r\n        symbol = token[0];\r\n\r\n        if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);\r\n        else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);\r\n        else if (symbol === '>') value = this.renderPartial(token, context, partials, config);\r\n        else if (symbol === '&') value = this.unescapedValue(token, context);\r\n        else if (symbol === 'name') value = this.escapedValue(token, context, config);\r\n        else if (symbol === 'text') value = this.rawValue(token);\r\n\r\n        if (value !== undefined)\r\n            buffer += value;\r\n    }\r\n\r\n    return buffer;\r\n};\r\n\r\nWriter.prototype.renderSection = function renderSection(token, context, partials, originalTemplate, config) {\r\n    var self = this;\r\n    var buffer = '';\r\n    var value = context.lookup(token[1]);\r\n\r\n    // This function is used to render an arbitrary template\r\n    // in the current context by higher-order sections.\r\n    function subRender(template) {\r\n        return self.render(template, context, partials, config);\r\n    }\r\n\r\n    if (!value) return;\r\n\r\n    if (isArray(value)) {\r\n        for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\r\n            buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\r\n        }\r\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\r\n        buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\r\n    } else if (isFunction(value)) {\r\n        if (typeof originalTemplate !== 'string')\r\n            throw new Error('Cannot use higher-order sections without the original template');\r\n\r\n        // Extract the portion of the original template that the section contains.\r\n        value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\r\n\r\n        if (value != null)\r\n            buffer += value;\r\n    } else {\r\n        buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\r\n    }\r\n    return buffer;\r\n};\r\n\r\nWriter.prototype.renderInverted = function renderInverted(token, context, partials, originalTemplate, config) {\r\n    var value = context.lookup(token[1]);\r\n\r\n    // Use JavaScript's definition of falsy. Include empty arrays.\r\n    // See https://github.com/janl/mustache.js/issues/186\r\n    if (!value || (isArray(value) && value.length === 0))\r\n        return this.renderTokens(token[4], context, partials, originalTemplate, config);\r\n};\r\n\r\nWriter.prototype.indentPartial = function indentPartial(partial, indentation, lineHasNonSpace) {\r\n    var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\r\n    var partialByNl = partial.split('\\n');\r\n    for (var i = 0; i < partialByNl.length; i++) {\r\n        if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\r\n            partialByNl[i] = filteredIndentation + partialByNl[i];\r\n        }\r\n    }\r\n    return partialByNl.join('\\n');\r\n};\r\n\r\nWriter.prototype.renderPartial = function renderPartial(token, context, partials, config) {\r\n    if (!partials) return;\r\n    var tags = this.getConfigTags(config);\r\n\r\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\r\n    if (value != null) {\r\n        var lineHasNonSpace = token[6];\r\n        var tagIndex = token[5];\r\n        var indentation = token[4];\r\n        var indentedValue = value;\r\n        if (tagIndex == 0 && indentation) {\r\n            indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\r\n        }\r\n        var tokens = this.parse(indentedValue, tags);\r\n        return this.renderTokens(tokens, context, partials, indentedValue, config);\r\n    }\r\n};\r\n\r\nWriter.prototype.unescapedValue = function unescapedValue(token, context) {\r\n    var value = context.lookup(token[1]);\r\n    if (value != null)\r\n        return value;\r\n};\r\n\r\nWriter.prototype.escapedValue = function escapedValue(token, context, config) {\r\n    var escape = this.getConfigEscape(config) || mustache.escape;\r\n    var value = context.lookup(token[1]);\r\n    if (value != null)\r\n        return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);\r\n};\r\n\r\nWriter.prototype.rawValue = function rawValue(token) {\r\n    return token[1];\r\n};\r\n\r\nWriter.prototype.getConfigTags = function getConfigTags(config) {\r\n    if (isArray(config)) {\r\n        return config;\r\n    } else if (config && typeof config === 'object') {\r\n        return config.tags;\r\n    } else {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nWriter.prototype.getConfigEscape = function getConfigEscape(config) {\r\n    if (config && typeof config === 'object' && !isArray(config)) {\r\n        return config.escape;\r\n    } else {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nvar mustache = {\r\n    name: 'mustache.js',\r\n    version: '4.2.0',\r\n    tags: ['{{', '}}'],\r\n    clearCache: undefined,\r\n    escape: undefined,\r\n    parse: undefined,\r\n    render: undefined,\r\n    Scanner: undefined,\r\n    Context: undefined,\r\n    Writer: undefined,\r\n    /**\r\n     * Allows a user to override the default caching strategy, by providing an\r\n     * object with set, get and clear methods. This can also be used to disable\r\n     * the cache by setting it to the literal `undefined`.\r\n     */\r\n    set templateCache(cache) {\r\n        defaultWriter.templateCache = cache;\r\n    },\r\n    /**\r\n     * Gets the default or overridden caching object from the default writer.\r\n     */\r\n    get templateCache() {\r\n        return defaultWriter.templateCache;\r\n    }\r\n};\r\n\r\n// All high-level mustache.* functions use this writer.\r\nvar defaultWriter = new Writer();\r\n\r\n/**\r\n * Clears all cached templates in the default writer.\r\n */\r\nmustache.clearCache = function clearCache() {\r\n    return defaultWriter.clearCache();\r\n};\r\n\r\n/**\r\n * Parses and caches the given template in the default writer and returns the\r\n * array of tokens it contains. Doing this ahead of time avoids the need to\r\n * parse templates on the fly as they are rendered.\r\n */\r\nmustache.parse = function parse(template, tags) {\r\n    return defaultWriter.parse(template, tags);\r\n};\r\n\r\n/**\r\n * Renders the `template` with the given `view`, `partials`, and `config`\r\n * using the default writer.\r\n */\r\nmustache.render = function render(template, view, partials, config) {\r\n    if (typeof template !== 'string') {\r\n        throw new TypeError('Invalid template! Template should be a \"string\" ' +\r\n            'but \"' + typeStr(template) + '\" was given as the first ' +\r\n            'argument for mustache#render(template, view, partials)');\r\n    }\r\n\r\n    return defaultWriter.render(template, view, partials, config);\r\n};\r\n\r\n// Export the escaping function so that the user may override it.\r\n// See https://github.com/janl/mustache.js/issues/244\r\nmustache.escape = escapeHtml;\r\n\r\n// Export these mainly for testing, but also for advanced usage.\r\nmustache.Scanner = Scanner;\r\nmustache.Context = Context;\r\nmustache.Writer = Writer;\r\n\r\nexport default mustache;\r\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = global || self, global.Mustache = factory());\n}(this, (function () { 'use strict';\n\n  /*!\n   * mustache.js - Logic-less {{mustache}} templates with JavaScript\n   * http://github.com/janl/mustache.js\n   */\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  /**\n   * Safe way of detecting whether or not the given thing is a primitive and\n   * whether it has the given property\n   */\n  function primitiveHasOwnProperty (primitive, propName) {\n    return (\n      primitive != null\n      && typeof primitive !== 'object'\n      && primitive.hasOwnProperty\n      && primitive.hasOwnProperty(propName)\n    );\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   *\n   * Tokens for partials also contain two more elements: 1) a string value of\n   * indendation prior to that tag and 2) the index of that tag on that line -\n   * eg a value of 2 indicates the partial is the third tag on this line.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n    var lineHasNonSpace = false;\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n    var indentation = '';  // Tracks indentation for tags that use it\n    var tagIndex = 0;      // Stores a count of number of tags encountered on a line\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n            indentation += chr;\n          } else {\n            nonSpace = true;\n            lineHasNonSpace = true;\n            indentation += ' ';\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n') {\n            stripSpace();\n            indentation = '';\n            tagIndex = 0;\n            lineHasNonSpace = false;\n          }\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      if (type == '>') {\n        token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\n      } else {\n        token = [ type, value, start, scanner.pos ];\n      }\n      tagIndex++;\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    stripSpace();\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, intermediateValue, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          intermediateValue = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *\n           * In the case where dot notation is used, we consider the lookup\n           * to be successful even if the last \"object\" in the path is\n           * not actually an object but a primitive (e.g., a string, or an\n           * integer), because it is sometimes useful to access a property\n           * of an autoboxed primitive, such as the length of a string.\n           **/\n          while (intermediateValue != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = (\n                hasProperty(intermediateValue, names[index])\n                || primitiveHasOwnProperty(intermediateValue, names[index])\n              );\n\n            intermediateValue = intermediateValue[names[index++]];\n          }\n        } else {\n          intermediateValue = context.view[name];\n\n          /**\n           * Only checking against `hasProperty`, which always returns `false` if\n           * `context.view` is not an object. Deliberately omitting the check\n           * against `primitiveHasOwnProperty` if dot notation is not used.\n           *\n           * Consider this example:\n           * ```\n           * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n           * ```\n           *\n           * If we were to check also against `primitiveHasOwnProperty`, as we do\n           * in the dot notation case, then render call would return:\n           *\n           * \"The length of a football field is 9.\"\n           *\n           * rather than the expected:\n           *\n           * \"The length of a football field is 100 yards.\"\n           **/\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit) {\n          value = intermediateValue;\n          break;\n        }\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.templateCache = {\n      _cache: {},\n      set: function set (key, value) {\n        this._cache[key] = value;\n      },\n      get: function get (key) {\n        return this._cache[key];\n      },\n      clear: function clear () {\n        this._cache = {};\n      }\n    };\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    if (typeof this.templateCache !== 'undefined') {\n      this.templateCache.clear();\n    }\n  };\n\n  /**\n   * Parses and caches the given `template` according to the given `tags` or\n   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.templateCache;\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n    var isCacheEnabled = typeof cache !== 'undefined';\n    var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\n\n    if (tokens == undefined) {\n      tokens = parseTemplate(template, tags);\n      isCacheEnabled && cache.set(cacheKey, tokens);\n    }\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   *\n   * If the optional `config` argument is given here, then it should be an\n   * object with a `tags` attribute or an `escape` attribute or both.\n   * If an array is passed, then it will be interpreted the same way as\n   * a `tags` attribute on a `config` object.\n   *\n   * The `tags` attribute of a `config` object must be an array with two\n   * string values: the opening and closing tags used in the template (e.g.\n   * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   *\n   * The `escape` attribute of a `config` object must be a function which\n   * accepts a string as input and outputs a safely escaped string.\n   * If an `escape` function is not provided, then an HTML-safe string\n   * escaping function is used as the default.\n   */\n  Writer.prototype.render = function render (template, view, partials, config) {\n    var tags = this.getConfigTags(config);\n    var tokens = this.parse(template, tags);\n    var context = (view instanceof Context) ? view : new Context(view, undefined);\n    return this.renderTokens(tokens, context, partials, template, config);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, config);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context, config);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials, config);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate, config);\n  };\n\n  Writer.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\n    var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n    var partialByNl = partial.split('\\n');\n    for (var i = 0; i < partialByNl.length; i++) {\n      if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n        partialByNl[i] = filteredIndentation + partialByNl[i];\n      }\n    }\n    return partialByNl.join('\\n');\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials, config) {\n    if (!partials) return;\n    var tags = this.getConfigTags(config);\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null) {\n      var lineHasNonSpace = token[6];\n      var tagIndex = token[5];\n      var indentation = token[4];\n      var indentedValue = value;\n      if (tagIndex == 0 && indentation) {\n        indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n      }\n      var tokens = this.parse(indentedValue, tags);\n      return this.renderTokens(tokens, context, partials, indentedValue, config);\n    }\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context, config) {\n    var escape = this.getConfigEscape(config) || mustache.escape;\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  Writer.prototype.getConfigTags = function getConfigTags (config) {\n    if (isArray(config)) {\n      return config;\n    }\n    else if (config && typeof config === 'object') {\n      return config.tags;\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  Writer.prototype.getConfigEscape = function getConfigEscape (config) {\n    if (config && typeof config === 'object' && !isArray(config)) {\n      return config.escape;\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  var mustache = {\n    name: 'mustache.js',\n    version: '4.2.0',\n    tags: [ '{{', '}}' ],\n    clearCache: undefined,\n    escape: undefined,\n    parse: undefined,\n    render: undefined,\n    Scanner: undefined,\n    Context: undefined,\n    Writer: undefined,\n    /**\n     * Allows a user to override the default caching strategy, by providing an\n     * object with set, get and clear methods. This can also be used to disable\n     * the cache by setting it to the literal `undefined`.\n     */\n    set templateCache (cache) {\n      defaultWriter.templateCache = cache;\n    },\n    /**\n     * Gets the default or overridden caching object from the default writer.\n     */\n    get templateCache () {\n      return defaultWriter.templateCache;\n    }\n  };\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view`, `partials`, and `config`\n   * using the default writer.\n   */\n  mustache.render = function render (template, view, partials, config) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials, config);\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n\n})));\n","import Mustache from 'mustache';\n\nimport './component.scss';\n\nexport default class Base {\n\n    constructor(id, params = {}, result = {}, options = {}) {\n        this.id = id\n        this.params = params\n        this.result = result\n        this.options = options\n\n        this.$component = document.getElementById(this.id)\n    }\n\n    getSectionById(id) {\n        return this.getEntityById(id, this.result.JS_DATA.SECTIONS)\n    }\n\n    getElementById(id) {\n        return this.getEntityById(id, this.result.JS_DATA.ITEMS)\n    }\n\n    getEntityById(id, entities) {\n        let entity = null\n\n        if (0 < entities.length) {\n            for (let row of entities) {\n                if (Number.parseInt(id) !== Number.parseInt(row.ID)) {\n                    continue;\n                }\n\n                entity = row\n\n                break\n            }\n        }\n\n        return entity\n    }\n\n    renderMustache(templateId, targetId, data) {\n        let mixId = `${templateId}_${targetId}`,\n            templateHtml = null,\n            $target = null\n\n        if (this.hasOwnProperty('mustacheCache') === false) {\n            this.mustacheCache = {}\n        }\n\n        if (this.mustacheCache.hasOwnProperty(mixId) === true) {\n            templateHtml = this.mustacheCache[mixId].templateHtml\n            $target = this.mustacheCache[mixId].$target\n        } else {\n            let $template = document.getElementById(templateId)\n            $target = document.getElementById(targetId)\n\n            if (!$template || !$target) {\n                return\n            }\n\n            templateHtml = $template.innerHTML\n\n            this.mustacheCache[mixId] = {\n                templateHtml: templateHtml,\n                $target: $target\n            }\n        }\n\n        $target.innerHTML = Mustache.render(templateHtml, data)\n    }\n}\n","import Mustache from './mustache';\n\nimport Base from './base';\n\nimport './component.scss';\n\nexport class Data extends Base {\n\n    constructor(id, params = {}, result = {}, options = {}) {\n        super(id, params, result, options)\n\n        this.activeNavigationId = 0\n\n        this.init()\n    }\n\n    init() {\n        this.initDocument()\n        this.addEventListeners()\n        this.fillStartData()\n        this.fillAddUrl()\n        this.render()\n    }\n\n    initDocument() {\n        document.documentElement.classList.add('agrebnev-wikiinside--inited')\n\n        if ('Y' !== this.params.IFRAME_REQUEST) {\n            return\n        }\n\n        document.documentElement.classList.add('agrebnev-wikiinside--iframe')\n    }\n\n    addEventListeners() {\n        this.$component.on('click', '.js-agrebnev-wikiinside-sec', event => {\n            let id = Number.parseInt(event.target.dataset.id)\n            this.showSectionById(id)\n            this.render()\n        })\n\n        this.$component.on('click', '.js-agrebnev-wikiinside-elem', event => {\n            let id = Number.parseInt(event.target.dataset.id)\n            this.showElementById(id)\n            this.render()\n        })\n    }\n\n    showSectionById(id) {\n        let entity = this.getSectionById(id)\n\n        if (!entity) {\n            this.fillIblockData()\n            this.fillAddUrl()\n            return\n        }\n\n        this.result.JS_DATA.CURRENT_DATA.ID = entity.ID\n        this.result.JS_DATA.CURRENT_DATA.TITLE = entity.NAME\n        this.result.JS_DATA.CURRENT_DATA.DESCRIPTION = entity.DESCRIPTION\n        this.result.JS_DATA.CURRENT_DATA.EDIT_URL = entity.EDIT_URL\n\n        this.activeNavigationId = entity.ID\n\n        this.fillAddUrl()\n    }\n\n    showElementById(id) {\n        let entity = this.getElementById(id)\n\n        if (!entity) {\n            return\n        }\n\n        this.result.JS_DATA.CURRENT_DATA.ID = entity.ID\n        this.result.JS_DATA.CURRENT_DATA.TITLE = entity.NAME\n        this.result.JS_DATA.CURRENT_DATA.DESCRIPTION = entity.DETAIL_TEXT\n        this.result.JS_DATA.CURRENT_DATA.EDIT_URL = entity.EDIT_URL\n\n        this.activeNavigationId = entity.IBLOCK_SECTION_ID\n\n        this.fillAddUrl()\n    }\n\n    fillIblockData() {\n        this.result.JS_DATA.CURRENT_DATA = {\n            ID: null,\n            TITLE: this.result.JS_DATA.IBLOCK.NAME,\n            DESCRIPTION: this.result.JS_DATA.IBLOCK.DESCRIPTION,\n            EDIT_URL: this.result.JS_DATA.IBLOCK.EDIT_URL,\n        }\n        this.activeNavigationId = 0\n\n        this.fillAddUrl()\n    }\n\n    fillStartData() {\n        this.fillIblockData()\n\n        let currentData = this.getCurrentDataByUrl()\n        if (null !== currentData) {\n            this.result.JS_DATA.CURRENT_DATA.ID = currentData.ID\n            this.result.JS_DATA.CURRENT_DATA.TITLE = currentData.NAME\n            this.result.JS_DATA.CURRENT_DATA.DESCRIPTION = currentData.DETAIL_TEXT\n            this.result.JS_DATA.CURRENT_DATA.EDIT_URL = currentData.EDIT_URL\n\n            this.activeNavigationId = currentData.IBLOCK_SECTION_ID\n\n            this.fillAddUrl()\n        }\n    }\n\n    fillAddUrl() {\n        let $link = this.$component.querySelector('.js-agrebnev-wikiinside-addnew')\n        if (!$link.dataset.startAddNewLink) {\n            $link.dataset.startAddNewLink = $link.getAttribute('href')\n        }\n\n        $link.setAttribute('href', `${$link.dataset.startAddNewLink}&IBLOCK_SECTION_ID=${this.activeNavigationId}`)\n    }\n\n    getCurrentDataByUrl() {\n        if (\n            0 === this.result.JS_DATA.ITEMS.length\n            || '' === this.params.LOCATION_PATHNAME\n        ) {\n            return null\n        }\n\n        let finedItem = null\n        for (let item of this.result.JS_DATA.ITEMS) {\n\n            let approve = false;\n            let approveParamsCount = 0;\n            if (this.params.LOCATION_PATHNAME !== item.PATHNAME) {\n                continue;\n            }\n\n            if (0 < Object.values(item.SEARCH).length) {\n                approve = false;\n                approveParamsCount = 0;\n                for (let name in item.SEARCH) {\n                    let param = `${name}=${item.SEARCH[name]}`\n                    if (0 < this.params.LOCATION_SEARCH.indexOf(param)) {\n                        approveParamsCount++\n                    }\n                }\n\n                if (Object.values(item.SEARCH).length === approveParamsCount) {\n                    approve = true;\n                }\n            } else {\n                approve = true;\n            }\n\n            if (false === approve) {\n                continue\n            }\n\n            finedItem = item\n\n            break;\n        }\n\n        return finedItem\n    }\n\n    render() {\n        this.renderNavigation()\n        this.renderBody()\n    }\n\n    renderNavigation() {\n        let blockId = `${this.id}-menu`,\n            startItem = {\n                ID: 0,\n                NAME: BX.message('AGREBNEV_WI_COMPONENT_TMPL_JS__GO_MAIN'),\n                CODE: 'agrebnev-wikiinside-zero-navi-item',\n            },\n            data = {\n                SECTIONS: [startItem].concat(this.result.JS_DATA.NAVIGATION)\n            }\n\n\n        let funcSetActive = function (items, activeId) {\n            if (!items || 0 === items.length) {\n                return items\n            }\n\n            for (let item of items) {\n                item.ACTIVE = Number.parseInt(activeId) === Number.parseInt(item.ID)\n\n                if (item.SUB_ITEMS && 0 < item.SUB_ITEMS.length) {\n                    item.SUB_ITEMS = funcSetActive(item.SUB_ITEMS, activeId);\n                }\n            }\n\n            return items;\n        }\n\n        data.SECTIONS = funcSetActive(data.SECTIONS, Number.parseInt(this.activeNavigationId))\n\n        this.renderMustache(`${blockId}-template`, `${blockId}-target`, data)\n    }\n\n    renderBody() {\n        let blockId = `${this.id}-body`,\n            data = Object.assign(\n                {},\n                {\n                    EDIT_URL: '',\n                    HAS_ELEMENTS: false,\n                    ELEMENTS: [],\n                },\n                this.result.JS_DATA.CURRENT_DATA\n            )\n\n        data.ELEMENTS = this.result.JS_DATA.ITEMS.filter(item => {\n            return Number.parseInt(this.activeNavigationId) === Number.parseInt(item.IBLOCK_SECTION_ID)\n        })\n        data.HAS_ELEMENTS = 0 < data.ELEMENTS.length\n\n        data.ELEMENTS = data.ELEMENTS.map(item => {\n            let rewriteFields = {\n                ACTIVE: Number.parseInt(data.ID) === Number.parseInt(item.ID)\n            }\n            return Object.assign({}, item, rewriteFields)\n        })\n\n        this.renderMustache(`${blockId}-template`, `${blockId}-target`, data)\n    }\n}\n"],"names":["objectToString","Object","prototype","toString","isArray","Array","isArrayPolyfill","object","call","isFunction","typeStr","obj","escapeRegExp","string","replace","hasProperty","propName","primitiveHasOwnProperty","primitive","hasOwnProperty","regExpTest","RegExp","test","testRegExp","re","nonSpaceRe","isWhitespace","entityMap","escapeHtml","String","fromEntityMap","s","whiteRe","spaceRe","equalsRe","curlyRe","tagRe","parseTemplate","template","tags","lineHasNonSpace","sections","tokens","spaces","hasTag","nonSpace","indentation","tagIndex","stripSpace","length","pop","openingTagRe","closingTagRe","closingCurlyRe","compileTags","tagsToCompile","split","Error","mustache","scanner","Scanner","start","type","value","chr","token","openSection","eos","pos","scanUntil","i","valueLength","charAt","push","scan","nestTokens","squashTokens","squashedTokens","lastToken","numTokens","nestedTokens","collector","section","tail","match","index","substring","search","Context","view","parentContext","cache","parent","lookup","name","context","intermediateValue","names","lookupHit","indexOf","Writer","templateCache","_cache","set","key","get","clear","clearCache","parse","cacheKey","join","isCacheEnabled","undefined","render","partials","config","getConfigTags","renderTokens","originalTemplate","buffer","symbol","renderSection","renderInverted","renderPartial","unescapedValue","escapedValue","rawValue","self","subRender","j","slice","indentPartial","partial","filteredIndentation","partialByNl","indentedValue","escape","getConfigEscape","version","defaultWriter","TypeError","Base","id","params","result","options","$component","document","getElementById","getEntityById","JS_DATA","SECTIONS","ITEMS","entities","entity","row","Number","parseInt","ID","templateId","targetId","data","mixId","templateHtml","$target","mustacheCache","$template","innerHTML","Mustache","Data","activeNavigationId","init","initDocument","addEventListeners","fillStartData","fillAddUrl","documentElement","classList","add","IFRAME_REQUEST","on","event","target","dataset","showSectionById","showElementById","getSectionById","fillIblockData","CURRENT_DATA","TITLE","NAME","DESCRIPTION","EDIT_URL","DETAIL_TEXT","IBLOCK_SECTION_ID","IBLOCK","currentData","getCurrentDataByUrl","$link","querySelector","startAddNewLink","getAttribute","setAttribute","LOCATION_PATHNAME","finedItem","item","approve","approveParamsCount","PATHNAME","values","SEARCH","param","LOCATION_SEARCH","renderNavigation","renderBody","blockId","startItem","BX","message","CODE","concat","NAVIGATION","funcSetActive","items","activeId","ACTIVE","SUB_ITEMS","renderMustache","assign","HAS_ELEMENTS","ELEMENTS","filter","map","rewriteFields"],"mappings":"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"}