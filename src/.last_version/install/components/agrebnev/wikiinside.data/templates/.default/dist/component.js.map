{"version":3,"file":"component.js","sources":["../../../../../../../../../../node_modules/mustache/mustache.js","../src/base.js","../src/component.js"],"sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = global || self, global.Mustache = factory());\n}(this, (function () { 'use strict';\n\n  /*!\n   * mustache.js - Logic-less {{mustache}} templates with JavaScript\n   * http://github.com/janl/mustache.js\n   */\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  /**\n   * Safe way of detecting whether or not the given thing is a primitive and\n   * whether it has the given property\n   */\n  function primitiveHasOwnProperty (primitive, propName) {\n    return (\n      primitive != null\n      && typeof primitive !== 'object'\n      && primitive.hasOwnProperty\n      && primitive.hasOwnProperty(propName)\n    );\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   *\n   * Tokens for partials also contain two more elements: 1) a string value of\n   * indendation prior to that tag and 2) the index of that tag on that line -\n   * eg a value of 2 indicates the partial is the third tag on this line.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n    var lineHasNonSpace = false;\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n    var indentation = '';  // Tracks indentation for tags that use it\n    var tagIndex = 0;      // Stores a count of number of tags encountered on a line\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n            indentation += chr;\n          } else {\n            nonSpace = true;\n            lineHasNonSpace = true;\n            indentation += ' ';\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n') {\n            stripSpace();\n            indentation = '';\n            tagIndex = 0;\n            lineHasNonSpace = false;\n          }\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      if (type == '>') {\n        token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\n      } else {\n        token = [ type, value, start, scanner.pos ];\n      }\n      tagIndex++;\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    stripSpace();\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, intermediateValue, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          intermediateValue = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *\n           * In the case where dot notation is used, we consider the lookup\n           * to be successful even if the last \"object\" in the path is\n           * not actually an object but a primitive (e.g., a string, or an\n           * integer), because it is sometimes useful to access a property\n           * of an autoboxed primitive, such as the length of a string.\n           **/\n          while (intermediateValue != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = (\n                hasProperty(intermediateValue, names[index])\n                || primitiveHasOwnProperty(intermediateValue, names[index])\n              );\n\n            intermediateValue = intermediateValue[names[index++]];\n          }\n        } else {\n          intermediateValue = context.view[name];\n\n          /**\n           * Only checking against `hasProperty`, which always returns `false` if\n           * `context.view` is not an object. Deliberately omitting the check\n           * against `primitiveHasOwnProperty` if dot notation is not used.\n           *\n           * Consider this example:\n           * ```\n           * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n           * ```\n           *\n           * If we were to check also against `primitiveHasOwnProperty`, as we do\n           * in the dot notation case, then render call would return:\n           *\n           * \"The length of a football field is 9.\"\n           *\n           * rather than the expected:\n           *\n           * \"The length of a football field is 100 yards.\"\n           **/\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit) {\n          value = intermediateValue;\n          break;\n        }\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.templateCache = {\n      _cache: {},\n      set: function set (key, value) {\n        this._cache[key] = value;\n      },\n      get: function get (key) {\n        return this._cache[key];\n      },\n      clear: function clear () {\n        this._cache = {};\n      }\n    };\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    if (typeof this.templateCache !== 'undefined') {\n      this.templateCache.clear();\n    }\n  };\n\n  /**\n   * Parses and caches the given `template` according to the given `tags` or\n   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.templateCache;\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n    var isCacheEnabled = typeof cache !== 'undefined';\n    var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\n\n    if (tokens == undefined) {\n      tokens = parseTemplate(template, tags);\n      isCacheEnabled && cache.set(cacheKey, tokens);\n    }\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   *\n   * If the optional `config` argument is given here, then it should be an\n   * object with a `tags` attribute or an `escape` attribute or both.\n   * If an array is passed, then it will be interpreted the same way as\n   * a `tags` attribute on a `config` object.\n   *\n   * The `tags` attribute of a `config` object must be an array with two\n   * string values: the opening and closing tags used in the template (e.g.\n   * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   *\n   * The `escape` attribute of a `config` object must be a function which\n   * accepts a string as input and outputs a safely escaped string.\n   * If an `escape` function is not provided, then an HTML-safe string\n   * escaping function is used as the default.\n   */\n  Writer.prototype.render = function render (template, view, partials, config) {\n    var tags = this.getConfigTags(config);\n    var tokens = this.parse(template, tags);\n    var context = (view instanceof Context) ? view : new Context(view, undefined);\n    return this.renderTokens(tokens, context, partials, template, config);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, config);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context, config);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials, config);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate, config);\n  };\n\n  Writer.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\n    var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n    var partialByNl = partial.split('\\n');\n    for (var i = 0; i < partialByNl.length; i++) {\n      if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n        partialByNl[i] = filteredIndentation + partialByNl[i];\n      }\n    }\n    return partialByNl.join('\\n');\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials, config) {\n    if (!partials) return;\n    var tags = this.getConfigTags(config);\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null) {\n      var lineHasNonSpace = token[6];\n      var tagIndex = token[5];\n      var indentation = token[4];\n      var indentedValue = value;\n      if (tagIndex == 0 && indentation) {\n        indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n      }\n      var tokens = this.parse(indentedValue, tags);\n      return this.renderTokens(tokens, context, partials, indentedValue, config);\n    }\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context, config) {\n    var escape = this.getConfigEscape(config) || mustache.escape;\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  Writer.prototype.getConfigTags = function getConfigTags (config) {\n    if (isArray(config)) {\n      return config;\n    }\n    else if (config && typeof config === 'object') {\n      return config.tags;\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  Writer.prototype.getConfigEscape = function getConfigEscape (config) {\n    if (config && typeof config === 'object' && !isArray(config)) {\n      return config.escape;\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  var mustache = {\n    name: 'mustache.js',\n    version: '4.2.0',\n    tags: [ '{{', '}}' ],\n    clearCache: undefined,\n    escape: undefined,\n    parse: undefined,\n    render: undefined,\n    Scanner: undefined,\n    Context: undefined,\n    Writer: undefined,\n    /**\n     * Allows a user to override the default caching strategy, by providing an\n     * object with set, get and clear methods. This can also be used to disable\n     * the cache by setting it to the literal `undefined`.\n     */\n    set templateCache (cache) {\n      defaultWriter.templateCache = cache;\n    },\n    /**\n     * Gets the default or overridden caching object from the default writer.\n     */\n    get templateCache () {\n      return defaultWriter.templateCache;\n    }\n  };\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view`, `partials`, and `config`\n   * using the default writer.\n   */\n  mustache.render = function render (template, view, partials, config) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials, config);\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n\n})));\n","import Mustache from 'mustache';\n\nimport './component.scss';\n\nexport default class Base {\n\n    constructor(id, params = {}, result = {}, options = {}) {\n        this.id = id\n        this.params = params\n        this.result = result\n        this.options = options\n\n        this.$component = document.getElementById(this.id)\n    }\n\n    getSectionById(id) {\n        return this.getEntityById(id, this.result.JS_DATA.SECTIONS)\n    }\n\n    getElementById(id) {\n        return this.getEntityById(id, this.result.JS_DATA.ITEMS)\n    }\n\n    getEntityById(id, entities) {\n        let entity = null\n\n        if (0 < entities.length) {\n            for (let row of entities) {\n                if (Number.parseInt(id) !== Number.parseInt(row.ID)) {\n                    continue;\n                }\n\n                entity = row\n\n                break\n            }\n        }\n\n        return entity\n    }\n\n    renderMustache(templateId, targetId, data) {\n        let mixId = `${templateId}_${targetId}`,\n            templateHtml = null,\n            $target = null\n\n        if (this.hasOwnProperty('mustacheCache') === false) {\n            this.mustacheCache = {}\n        }\n\n        if (this.mustacheCache.hasOwnProperty(mixId) === true) {\n            templateHtml = this.mustacheCache[mixId].templateHtml\n            $target = this.mustacheCache[mixId].$target\n        } else {\n            let $template = document.getElementById(templateId)\n            $target = document.getElementById(targetId)\n\n            if (!$template || !$target) {\n                return\n            }\n\n            templateHtml = $template.innerHTML\n\n            this.mustacheCache[mixId] = {\n                templateHtml: templateHtml,\n                $target: $target\n            }\n        }\n\n        $target.innerHTML = Mustache.render(templateHtml, data)\n    }\n}\n","import Mustache from 'mustache';\n\nimport Base from './base';\n\nimport './component.scss';\n\nexport class Data extends Base {\n\n    constructor(id, params = {}, result = {}, options = {}) {\n        super(id, params, result, options)\n\n        this.activeNavigationId = 0\n\n        this.init()\n    }\n\n    init() {\n        this.initDocument()\n        this.addEventListeners()\n        this.fillStartData()\n        this.render()\n    }\n\n    initDocument() {\n        document.documentElement.classList.add('agrebnev-wikiinside--inited')\n\n        if ('Y' !== this.params.IFRAME_REQUEST) {\n            return\n        }\n\n        document.documentElement.classList.add('agrebnev-wikiinside--iframe')\n    }\n\n    addEventListeners() {\n        this.$component.on('click', '.js-agrebnev-wikiinside-sec', event => {\n            let id = Number.parseInt(event.target.dataset.id)\n            this.showSectionById(id)\n            this.render()\n        })\n\n        this.$component.on('click', '.js-agrebnev-wikiinside-elem', event => {\n            let id = Number.parseInt(event.target.dataset.id)\n            this.showElementById(id)\n            this.render()\n        })\n    }\n\n    showSectionById(id) {\n        let entity = this.getSectionById(id)\n\n        if (!entity) {\n            this.fillStartData()\n            return\n        }\n\n        this.result.JS_DATA.CURRENT_DATA.ID = entity.ID\n        this.result.JS_DATA.CURRENT_DATA.TITLE = entity.NAME\n        this.result.JS_DATA.CURRENT_DATA.DESCRIPTION = entity.DESCRIPTION\n\n        this.activeNavigationId = entity.ID\n    }\n\n    showElementById(id) {\n        let entity = this.getElementById(id)\n\n        if (!entity) {\n            return\n        }\n\n        this.result.JS_DATA.CURRENT_DATA.ID = entity.ID\n        this.result.JS_DATA.CURRENT_DATA.TITLE = entity.NAME\n        this.result.JS_DATA.CURRENT_DATA.DESCRIPTION = entity.DETAIL_TEXT\n\n        this.activeNavigationId = entity.IBLOCK_SECTION_ID\n    }\n\n    fillStartData() {\n        this.result.JS_DATA.CURRENT_DATA = {\n            ID: null,\n            TITLE: this.result.JS_DATA.IBLOCK.NAME,\n            DESCRIPTION: this.result.JS_DATA.IBLOCK.DESCRIPTION,\n        }\n        this.activeNavigationId = 0\n\n        let currentData = this.getCurrentDataByUrl()\n        if (null !== currentData) {\n            this.result.JS_DATA.CURRENT_DATA.ID = currentData.ID\n            this.result.JS_DATA.CURRENT_DATA.TITLE = currentData.NAME\n            this.result.JS_DATA.CURRENT_DATA.DESCRIPTION = currentData.DETAIL_TEXT\n\n            this.activeNavigationId = currentData.IBLOCK_SECTION_ID\n        }\n    }\n\n    getCurrentDataByUrl() {\n        if (\n            0 === this.result.JS_DATA.ITEMS.length\n            || '' === this.params.LOCATION_PATHNAME\n        ) {\n            return null\n        }\n\n        let finedItem = null\n        for (let item of this.result.JS_DATA.ITEMS) {\n\n            let approve = false;\n            let approveParamsCount = 0;\n            if (this.params.LOCATION_PATHNAME !== item.PATHNAME) {\n                continue;\n            }\n\n            if (0 < Object.values(item.SEARCH).length) {\n                approve = false;\n                approveParamsCount = 0;\n                for (let name in item.SEARCH) {\n                    let param = `${name}=${item.SEARCH[name]}`\n                    if (0 < this.params.LOCATION_SEARCH.indexOf(param)) {\n                        approveParamsCount++\n                    }\n                }\n\n                if (Object.values(item.SEARCH).length === approveParamsCount) {\n                    approve = true;\n                }\n            } else {\n                approve = true;\n            }\n\n            if (false === approve) {\n                continue\n            }\n\n            finedItem = item\n\n            break;\n        }\n\n        return finedItem\n    }\n\n    render() {\n        this.renderNavigation()\n        this.renderBody()\n    }\n\n    renderNavigation() {\n        let blockId = `${this.id}-menu`,\n            startItem = {\n                ID: 0,\n                NAME: BX.message('AGREBNEV_WI_COMPONENT_TMPL_JS__GO_MAIN'),\n                CODE: 'agrebnev-wikiinside-zero-navi-item',\n            },\n            data = {\n                SECTIONS: [startItem].concat(this.result.JS_DATA.NAVIGATION)\n            }\n\n\n        let funcSetActive = function (items, activeId) {\n            if (!items || 0 === items.length) {\n                return items\n            }\n\n            for (let item of items) {\n                item.ACTIVE = Number.parseInt(activeId) === Number.parseInt(item.ID)\n\n                if (item.SUB_ITEMS && 0 < item.SUB_ITEMS.length) {\n                    item.SUB_ITEMS = funcSetActive(item.SUB_ITEMS, activeId);\n                }\n            }\n\n            return items;\n        }\n\n        data.SECTIONS = funcSetActive(data.SECTIONS, Number.parseInt(this.activeNavigationId))\n\n        this.renderMustache(`${blockId}-template`, `${blockId}-target`, data)\n    }\n\n    renderBody() {\n        let blockId = `${this.id}-body`,\n            data = Object.assign({}, {HAS_ELEMENTS: false, ELEMENTS: []}, this.result.JS_DATA.CURRENT_DATA)\n\n        data.ELEMENTS = this.result.JS_DATA.ITEMS.filter(item => {\n            return Number.parseInt(this.activeNavigationId) === Number.parseInt(item.IBLOCK_SECTION_ID)\n        })\n        data.HAS_ELEMENTS = 0 < data.ELEMENTS.length\n\n        data.ELEMENTS = data.ELEMENTS.map(item => {\n            let rewriteFields = {\n                ACTIVE: Number.parseInt(data.ID) === Number.parseInt(item.ID)\n            }\n            return Object.assign({}, item, rewriteFields)\n        })\n\n        this.renderMustache(`${blockId}-template`, `${blockId}-target`, data)\n    }\n}\n"],"names":["object","escapeRegExp","string","replace","isWhitespace","whiteRe","spaceRe","curlyRe","tagRe","tokens","spaces","hasTag","nonSpace","indentation","tagIndex","length","RegExp","closingTagRe","closingCurlyRe","tagsToCompile","eos","pos","value","scanner","scanUntil","charAt","lineHasNonSpace","type","scan","push","openSection","sections","compileTags","lastToken","squashedTokens","token","numTokens","i","section","pop","collector","tail","substring","match","parent","name","lookupHit","context","set","get","key","_cache","clear","isCacheEnabled","cache","cacheKey","view","undefined","buffer","renderTokens","partials","config","filteredIndentation","partialByNl","indentedValue","indentPartial","escape","mustache","rawValue","Writer","prototype","getConfigTags","version","clearCache","parse","render","Scanner","Context","Base","id","params","result","options","$component","document","getElementById","getEntityById","JS_DATA","SECTIONS","ITEMS","entities","entity","row","Number","parseInt","ID","templateId","targetId","data","mixId","templateHtml","$target","hasOwnProperty","mustacheCache","$template","innerHTML","Mustache","Data","activeNavigationId","init","initDocument","addEventListeners","fillStartData","documentElement","classList","add","IFRAME_REQUEST","on","event","target","dataset","showSectionById","showElementById","getSectionById","CURRENT_DATA","TITLE","NAME","DESCRIPTION","DETAIL_TEXT","IBLOCK_SECTION_ID","IBLOCK","currentData","getCurrentDataByUrl","LOCATION_PATHNAME","finedItem","item","approve","approveParamsCount","PATHNAME","Object","values","SEARCH","param","LOCATION_SEARCH","indexOf","renderNavigation","renderBody","blockId","startItem","BX","message","CODE","concat","NAVIGATION","funcSetActive","items","activeId","ACTIVE","SUB_ITEMS","renderMustache","assign","HAS_ELEMENTS","ELEMENTS","filter","map","rewriteFields"],"mappings":"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"}